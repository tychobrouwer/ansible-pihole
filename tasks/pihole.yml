---
- name: Create pihole group
  ansible.builtin.group:
    name: pihole
    state: present

- name: Create pihole user
  ansible.builtin.user:
    name: pihole
    state: present
    group: pihole
    shell: /usr/sbin/nologin
    createhome: false

- name: Ensure Pi-hole folder is present
  ansible.builtin.file:
    path: /etc/pihole
    state: directory
    mode: "0775"
    owner: pihole
    group: pihole

- name: Ensure setup vars file is on remote
  ansible.builtin.template:
    src: setupVars.conf.j2
    dest: /etc/pihole/setupVars.conf
    mode: "0644"
    owner: pihole
    group: pihole
  register: setupVars

- name: Get Pi-hole install script
  ansible.builtin.get_url:
    url: "{{ pihole_download_url }}"
    dest: "{{ pihole_install_script }}"
    force: true
    mode: "0755"

- name: Check if Pi-hole executable exists
  ansible.builtin.stat:
    path: /usr/local/bin/pihole
  register: pihole_install_script_stat

- name: No Pi-hole, run install script
  ansible.builtin.command: "{{ pihole_install_script }} --unattended"
  when: pihole_install_script_stat.stat.exists == false or setupVars.changed == true

- name: Ensure Pi-hole password is set
  ansible.builtin.command: "pihole -a -p {{ pihole_admin_password }}"
  when: which_pihole is defined and which_pihole is not failed
  changed_when: true

- name: Start Pi-hole
  ansible.builtin.command: pihole enable && pihole restartdns
  changed_when: false

- name: Update Pi-hole
  ansible.builtin.command: pihole -up
  register: pihole_update
  changed_when: pi_update.stdout.find("update available") != -1
  when: which_pihole is defined and which_pihole is not failed
